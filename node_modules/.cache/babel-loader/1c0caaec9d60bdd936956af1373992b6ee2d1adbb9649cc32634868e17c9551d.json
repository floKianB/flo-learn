{"ast":null,"code":"var _jsxFileName = \"/Users/kianbaban/Development/FrontEnd/Flo-shops/src/components/sign-in/sign-in-form.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport \"./sign-in-form.scss\";\nimport { signInWithGooglePopup, signInAuthUserWithEmailAndPassword } from '../../utils/firebase/firebase.utils';\nimport FormInput from '../form-input/form-input.component';\nimport Button from '../button/button.component';\nimport { Notify } from '../../utils/notify.utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SignInForm() {\n  _s();\n  const navigate = useNavigate();\n  const defaultFormFields = {\n    email: '',\n    password: ''\n  };\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const {\n    email,\n    password\n  } = formFields;\n  const ResetFormFields = () => setFormFields(defaultFormFields);\n  const logGoogleUserPopup = async () => {\n    await signInWithGooglePopup();\n  };\n  const Submit = async e => {\n    e.preventDefault();\n    try {\n      await signInAuthUserWithEmailAndPassword(email, password);\n      Notify('success', 'Sign in ');\n      navigate('/');\n    } catch (error) {\n      switch (error.code) {\n        case \"auth/wrong-password\":\n          alert(\"incorrect password\");\n          break;\n        case \"auth/user-not-found\":\n          alert(\"user not found\");\n          break;\n        default:\n          console.log(error);\n          ResetFormFields();\n      }\n    }\n  };\n  const logGoogleUserPopupHnadler = async () => {\n    try {\n      await logGoogleUserPopup();\n      navigate('/');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target; // here we get name and value of each input\n    setFormFields({\n      ...formFields,\n      [name]: value\n    }); // we set the specific key of the FormFields object\n    // Let's create a form validation in Utils for the content of this form.\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sign-in-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"I already have an account?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: Submit,\n        action: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(FormInput, {\n          label: \"Email\",\n          type: \"email\",\n          name: \"email\",\n          onChange: handleChange,\n          required: true,\n          value: email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n          label: \"Password\",\n          type: \"password\",\n          name: \"password\",\n          onChange: handleChange,\n          required: true,\n          value: password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-container\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"button\",\n            onClick: () => logGoogleUserPopupHnadler(),\n            buttonType: \"google\",\n            children: \"Google Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(SignInForm, \"ZQI6DyG3wOgk3/WA4sfv/PsWTac=\", false, function () {\n  return [useNavigate];\n});\n_c = SignInForm;\nexport default SignInForm;\nvar _c;\n$RefreshReg$(_c, \"SignInForm\");","map":{"version":3,"names":["React","useState","useNavigate","signInWithGooglePopup","signInAuthUserWithEmailAndPassword","FormInput","Button","Notify","SignInForm","navigate","defaultFormFields","email","password","formFields","setFormFields","ResetFormFields","logGoogleUserPopup","Submit","e","preventDefault","error","code","alert","console","log","logGoogleUserPopupHnadler","handleChange","name","value","target"],"sources":["/Users/kianbaban/Development/FrontEnd/Flo-shops/src/components/sign-in/sign-in-form.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport \"./sign-in-form.scss\";\n\n\nimport { signInWithGooglePopup, signInAuthUserWithEmailAndPassword } from '../../utils/firebase/firebase.utils';\nimport FormInput from '../form-input/form-input.component';\nimport Button from '../button/button.component';\nimport { Notify } from '../../utils/notify.utils';\n\nfunction SignInForm() {\n    const navigate = useNavigate();\n\n    const defaultFormFields = {\n        email: '',\n        password: '',\n    }\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const { email, password } = formFields;\n\n    const ResetFormFields = () => setFormFields(defaultFormFields);\n\n\n    const logGoogleUserPopup = async () => {\n        await signInWithGooglePopup();\n    }\n\n    const Submit = async (e) => {\n        e.preventDefault();\n        try {\n            await signInAuthUserWithEmailAndPassword(email, password);\n            Notify('success', 'Sign in ')\n            navigate('/')\n        } catch(error){\n            switch(error.code){\n                case \"auth/wrong-password\":\n                    alert(\"incorrect password\");\n                    break;\n                case \"auth/user-not-found\":\n                    alert(\"user not found\");\n                    break;\n                default:\n                    console.log(error);\n\n                ResetFormFields();\n            }\n        }\n    }\n    const logGoogleUserPopupHnadler = async () => {\n        try {\n            await logGoogleUserPopup();\n            navigate('/');\n        } catch (error){\n            console.log(error);\n        }\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;                       // here we get name and value of each input\n        setFormFields({ ...formFields, [name]: value });        // we set the specific key of the FormFields object\n        // Let's create a form validation in Utils for the content of this form.\n    }\n    return (\n        <>\n        <div className='sign-in-container'>\n            <h2>I already have an account?</h2>\n            <form onSubmit = { Submit } action='/' >\n                <FormInput label=\"Email\" type=\"email\" name=\"email\" onChange={handleChange} required value={email} />\n                <FormInput label=\"Password\" type=\"password\" name=\"password\" onChange={handleChange} required value={password} />\n                <div className=\"buttons-container\">\n                    <Button type=\"submit\" >Sign In</Button>\n                    <Button type=\"button\" onClick={() => logGoogleUserPopupHnadler()} buttonType=\"google\">Google Sign In</Button>\n                </div>\n            </form>\n        </div>\n        </>\n        \n    )\n}\n\nexport default SignInForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,qBAAqB;AAG5B,SAASC,qBAAqB,EAAEC,kCAAkC,QAAQ,qCAAqC;AAC/G,OAAOC,SAAS,MAAM,oCAAoC;AAC1D,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,SAASC,MAAM,QAAQ,0BAA0B;AAAC;AAAA;AAElD,SAASC,UAAU,GAAG;EAAA;EAClB,MAAMC,QAAQ,GAAGP,WAAW,EAAE;EAE9B,MAAMQ,iBAAiB,GAAG;IACtBC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACd,CAAC;EACD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAACS,iBAAiB,CAAC;EAC/D,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGC,UAAU;EAEtC,MAAME,eAAe,GAAG,MAAMD,aAAa,CAACJ,iBAAiB,CAAC;EAG9D,MAAMM,kBAAkB,GAAG,YAAY;IACnC,MAAMb,qBAAqB,EAAE;EACjC,CAAC;EAED,MAAMc,MAAM,GAAG,MAAOC,CAAC,IAAK;IACxBA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAI;MACA,MAAMf,kCAAkC,CAACO,KAAK,EAAEC,QAAQ,CAAC;MACzDL,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC;MAC7BE,QAAQ,CAAC,GAAG,CAAC;IACjB,CAAC,CAAC,OAAMW,KAAK,EAAC;MACV,QAAOA,KAAK,CAACC,IAAI;QACb,KAAK,qBAAqB;UACtBC,KAAK,CAAC,oBAAoB,CAAC;UAC3B;QACJ,KAAK,qBAAqB;UACtBA,KAAK,CAAC,gBAAgB,CAAC;UACvB;QACJ;UACIC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;UAEtBL,eAAe,EAAE;MAAC;IAE1B;EACJ,CAAC;EACD,MAAMU,yBAAyB,GAAG,YAAY;IAC1C,IAAI;MACA,MAAMT,kBAAkB,EAAE;MAC1BP,QAAQ,CAAC,GAAG,CAAC;IACjB,CAAC,CAAC,OAAOW,KAAK,EAAC;MACXG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;IACtB;EACJ,CAAC;EAED,MAAMM,YAAY,GAAIR,CAAC,IAAK;IACxB,MAAM;MAAES,IAAI;MAAEC;IAAM,CAAC,GAAGV,CAAC,CAACW,MAAM,CAAC,CAAuB;IACxDf,aAAa,CAAC;MAAE,GAAGD,UAAU;MAAE,CAACc,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC,CAAQ;IACxD;EACJ,CAAC;;EACD,oBACI;IAAA,uBACA;MAAK,SAAS,EAAC,mBAAmB;MAAA,wBAC9B;QAAA,UAAI;MAA0B;QAAA;QAAA;QAAA;MAAA,QAAK,eACnC;QAAM,QAAQ,EAAKX,MAAQ;QAAC,MAAM,EAAC,GAAG;QAAA,wBAClC,QAAC,SAAS;UAAC,KAAK,EAAC,OAAO;UAAC,IAAI,EAAC,OAAO;UAAC,IAAI,EAAC,OAAO;UAAC,QAAQ,EAAES,YAAa;UAAC,QAAQ;UAAC,KAAK,EAAEf;QAAM;UAAA;UAAA;UAAA;QAAA,QAAG,eACpG,QAAC,SAAS;UAAC,KAAK,EAAC,UAAU;UAAC,IAAI,EAAC,UAAU;UAAC,IAAI,EAAC,UAAU;UAAC,QAAQ,EAAEe,YAAa;UAAC,QAAQ;UAAC,KAAK,EAAEd;QAAS;UAAA;UAAA;UAAA;QAAA,QAAG,eAChH;UAAK,SAAS,EAAC,mBAAmB;UAAA,wBAC9B,QAAC,MAAM;YAAC,IAAI,EAAC,QAAQ;YAAA,UAAE;UAAO;YAAA;YAAA;YAAA;UAAA,QAAS,eACvC,QAAC,MAAM;YAAC,IAAI,EAAC,QAAQ;YAAC,OAAO,EAAE,MAAMa,yBAAyB,EAAG;YAAC,UAAU,EAAC,QAAQ;YAAA,UAAC;UAAc;YAAA;YAAA;YAAA;UAAA,QAAS;QAAA;UAAA;UAAA;UAAA;QAAA,QAC3G;MAAA;QAAA;QAAA;QAAA;MAAA,QACH;IAAA;MAAA;MAAA;MAAA;IAAA;EACL,iBACH;AAGX;AAAC,GApEQjB,UAAU;EAAA,QACEN,WAAW;AAAA;AAAA,KADvBM,UAAU;AAsEnB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}